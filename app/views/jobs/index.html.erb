<div id="nav-title">
  <a href="/">Mates Rates</a>
</div>
  <ul>
    <li class="categories-list">Categories:</li>
  <% @jobtypes.each do |jt| %>
    <a href="/job_types/<%=jt.id%>"><li class="categories-list"><%=jt.name%></li></a>
  <% end %>
    <a href="/jobs"><li class="categories-list">All</li></a>
  </ul>

  <br/>
  <form action="/jobs">
    <!-- <div id="locationField"> -->
      <!-- <label for="autocomplete">Search by location</label> -->
      <input id="autocomplete" placeholder="Search by location..."
      name="location" onFocus="geolocate()" type="text">
    <!-- </div> -->
    <label for="proximity">Distance</label>
      <select class=""required name="proximity">
        <option value="">Please select</option>
        <option value="10">10km</option>
        <option value="25">25km</option>
        <option value="50">50km</option>
        <option value="100">100km</option>
        <option value="250">250km</option>
        <option value="1000">1000km</option>
      </select>
    <button>update</button>
  </form>

<br/>
<hr/>

<p id="alljobtitle">All Jobs</p>
<h3><%=@noJobs%></h3>
<% if @jobs == nil %>
<% else %>
  <% @jobs.each do |job| %>
    <a class="job-link" href="/jobs/<%=job.id%>">
      <div class="job_container">
        <div class="job_title">
           <%=job.title%>
        </div>
        <div class="job-inner-container">

          <div class="job_price">
            Money? <%=job.price%>
          </div>
          <div class="job_timeframe">
            Required:
           <%= job.timeframe %>
          </div>

          <div class="job_owner">
            <%= User.find(job.user_id).first_name%>,
            <span class="job_location">

            <% if job.suburb == nil %>
              <% @suburb = "" %>
            <% else %>
              <% @suburb = job.suburb %>
            <% end %>
            <% if job.state == nil %>
              <% @state = "" %>
            <% else %>
              <% @state =  ", " + job.state %>
            <% end %>
              <%=@suburb%><%=@state%>
            </span>
            <span class="job-creation-date"><%= job.created_at.strftime("%d/%m/%Y") %></span>
          </div>
        </div>
      </div>
    </a>
  <% end %>
<% end %>

<hr/>


<br/>
<div id="address">
  <input class="field" type="hidden" id="street_number" name="street_number" placeholder="Street number"></input>
  <input class="field" type="hidden" id="route" name = "street" placeholder="Street"></input>
  <input class="field" type="hidden"id="locality" name = "suburb" placeholder="Suburb"></input>
  <input class="field" type="hidden"id="administrative_area_level_1" name="state" placeholder="State"></input>
  <input class="field" type="hidden"id="postal_code" name="postcode" placeholder="Postcode"></input>
  <input class="field" type="hidden"id="country" name="country" placeholder="Country"></input>
</div>
<br/>
<!-- <button>CREATE</button> -->

</form>
<script>

  var placeSearch, autocomplete;
  var componentForm = {
    street_number: 'short_name',
    route: 'long_name',
    locality: 'long_name',
    administrative_area_level_1: 'short_name',
    country: 'long_name',
    postal_code: 'short_name'
  };

  function initAutocomplete() {
    // Create the autocomplete object, restricting the search to geographical
    // location types.
    autocomplete = new google.maps.places.Autocomplete(
        /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
        {types: ['geocode']});

    // When the user selects an address from the dropdown, populate the address
    // fields in the form.
    autocomplete.addListener('place_changed', fillInAddress);
  }

  function fillInAddress() {
    // Get the place details from the autocomplete object.
    var place = autocomplete.getPlace();

    for (var component in componentForm) {
      document.getElementById(component).value = '';
      document.getElementById(component).disabled = false;
    }

    // Get each component of the address from the place details
    // and fill the corresponding field on the form.
    for (var i = 0; i < place.address_components.length; i++) {
      var addressType = place.address_components[i].types[0];
      if (componentForm[addressType]) {
        var val = place.address_components[i][componentForm[addressType]];
        document.getElementById(addressType).value = val;
      }
    }
  }

  // Bias the autocomplete object to the user's geographical location,
  // as supplied by the browser's 'navigator.geolocation' object.
  function geolocate() {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(function(position) {
        var geolocation = {
          lat: position.coords.latitude,
          lng: position.coords.longitude
        };
        var circle = new google.maps.Circle({
          center: geolocation,
          radius: position.coords.accuracy
        });
        autocomplete.setBounds(circle.getBounds());
      });
    }
  }
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCgv2nF9cSyCe8iy0UW7YtTiB3FpprBl4c&libraries=places&callback=initAutocomplete"
    async defer></script>
